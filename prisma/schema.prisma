// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum userRole {
  admin
  customer
}

model User {
  id                  String            @id @default(uuid())
  name                String
  email               String            @unique
  password            String
  role                userRole          @default(customer)
  contactNo           String            @unique
  address             String
  profileImg          String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  reviews_and_ratings ReviewAndRating[]
  Order               Order[]

  @@map("users")
}

model Category {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  books     Book[]

  @@map("categories")
}

model Book {
  id                  String            @id @default(uuid())
  title               String
  author              String
  price               Float
  genre               String
  publicationDate     DateTime
  categoryId          String
  category            Category          @relation(fields: [categoryId], references: [id])
  reviews_and_ratings ReviewAndRating[]
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  orderdBooks         OrderdBook[]

  @@map("books")
}

model ReviewAndRating {
  id        String   @id @default(uuid())
  review    String
  rating    Int
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews_and_ratings")
}

enum orderStatus {
  pending
  shipped
  delivered
}

model Order {
  id          String       @id @default(uuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  orderdBooks Json[]
  status      orderStatus  @default(pending)
  createdAt   DateTime     @default(now())
  orderdBook  OrderdBook[]

  @@map("orders")
}

model OrderdBook {
  id       String @id @default(uuid())
  orderId  String
  order    Order  @relation(fields: [orderId], references: [id])
  bookId   String
  book     Book   @relation(fields: [bookId], references: [id])
  quantity Int
}
